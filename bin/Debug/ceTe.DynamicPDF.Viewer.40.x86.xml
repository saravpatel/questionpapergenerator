<?xml version="1.0"?>
<doc>
  <assembly>
        "ceTe.DynamicPDF.Viewer"
    </assembly>
  <members>
    <member name="P:ceTe.DynamicPDF.Viewer.LaunchAction.FilePath">
      <summary>
Gets the file path of the document associated with the link action.
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.LaunchAction">
      <summary>
Specifies the <b>Launch</b> action type for the link.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.RemoteGoToAction.FilePath">
      <summary>
Gets the file path of the document associated with the link action.
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.RemoteGoToAction">
      <summary>
Specifies the <b>RemoteGoTo</b> action type for the link.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.GoToAction.PageNumber">
      <summary>
Gets the destination page number associated with the link action.
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.GoToAction">
      <summary>
Specifies the <b>GoTo</b> action type for the link.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.URIAction.URIpath">
      <summary>
Gets the Universal Resource Identifier, including web pages and other Internet based resources. 
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.URIAction">
      <summary>
Specifies the <b>URI</b> action type for the link.
</summary>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.AddLicense(System.String)">
      <summary>
Adds a license key.
</summary>
      <param name="licenseKey">The license key to add.</param>
      <returns>A boolean value indicating if the license key is valid.</returns>
      <remarks>This method accepts a license key, not a serial number.</remarks>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.Navigate(ceTe.DynamicPDF.Viewer.Action)">
      <summary>
Navigate to the destination stored in the <see cref="T:ceTe.DynamicPDF.Viewer.Action" /> object of the link.
</summary>
      <param name="action"> The <see cref="T:ceTe.DynamicPDF.Viewer.Action" /> object containing the information about the link.</param>
      <remarks> In case of remote goto user needs to open the file first and then navigate to the action. </remarks>
      <example>The following example will show how to get a <see cref="T:ceTe.DynamicPDF.Viewer.Action" /> object and navigate to it. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.LinkClicked, AddressOf MyPdfViewer_LinkClicked
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub MyPdfViewer_LinkClicked(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.LinkClickedEventArgs)
        ' Get the action associated with the link.
        Dim Myction As ceTe.DynamicPDF.Viewer.Action = e.Action

        ' Navigate to the action.
        Me.MyPdfViewer.Navigate(Myction)
    End Sub
        
End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
             InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						                				
											
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.LinkClicked += new ceTe.DynamicPDF.Viewer.LinkClickEventHandler(this.pdfViewer_LinkClicked);
        }

        private void pdfViewer_LinkClicked(object sender, ceTe.DynamicPDF.Viewer.LinkClickedEventArgs e)
        {
            // Get the action associated with the link.
            ceTe.DynamicPDF.Viewer.Action action = e.Action;

            // Navigate to the action.
            this.pdfViewer.Navigate(action);
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.GetPageVisibleArea(ceTe.DynamicPDF.Viewer.View)">
      <summary>
Retrieves an array of pages present in <see cref="T:ceTe.DynamicPDF.Viewer.View" /> specified with respective visible area.
</summary>
      <param name="view">The <see cref="T:ceTe.DynamicPDF.Viewer.View" /> whose visible area is required. </param>
      <example> For example refer <see cref="T:ceTe.DynamicPDF.Viewer.PageVisibleArea" /> class. </example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.ClearSearchHighlights">
      <summary>
Clear all the highlights in the document.
</summary>
      <example>The following example will show how to clear all the highlights from the document. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Open document in viewer.
        MyPdfViewer.Open("C:\MyDocument.pdf")

        ' Clear all the highlights.
        MyPdfViewer.ClearSearchHighlights()       
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						                				
							
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load+=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Open document in viewer.
            pdfViewer.Open(@"C:\MyDocument.pdf");

            // Clear all the highlights.
            pdfViewer.ClearSearchHighlights();
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.Highlight(System.String,ceTe.DynamicPDF.Viewer.MatchOptions)">
      <summary>
Highlights the specified string throughout the document.
</summary>
      <param name="searchTerm">The string to be highlighted.</param>
      <param name="option">The match option to be used to search and highlight the string.</param>
      <example>The following example will show how to highlight a string throughout the document with a match option. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Highlights a string throughout the document.
        MyPdfViewer.Highlight("string", MatchOptions.WholeWordOnly)       
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						                				
			
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
             this.Load+=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Highlights a string throughout the document.
            pdfViewer.Highlight("string" , MatchOptions.WholeWordOnly);
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.SearchBackward(System.String,ceTe.DynamicPDF.Viewer.MatchOptions)">
      <summary>
Searches the string specified in backward direction.
</summary>
      <param name="searchTerm">The string to be searched.</param>
      <param name="option">The match option to use for searching.</param>
      <example>The following example will show how to search a string in backward direction with match option. <p /><code lang="VB">			    
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Searches string in backward direction.
        MyPdfViewer.SearchBackward("string", MatchOptions.WholeWordOnly)        
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						                				

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load+=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Searches string in backward direction.
            pdfViewer.SearchBackward("string" , MatchOptions.WholeWordOnly);
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.SearchForward(System.String,ceTe.DynamicPDF.Viewer.MatchOptions)">
      <summary>
Searches the string specified in forward direction.
</summary>
      <param name="searchTerm">The string to be searched.</param>
      <param name="option">The match option to use for searching.</param>
      <example>The following example will show how to search a sring in forward direction with match option. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Searches string in forward direction.
        MyPdfViewer.SearchForward("string", MatchOptions.WholeWordOnly)        
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						
			                				
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load+=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Searches string in forward direction.
            pdfViewer.SearchForward("string" , MatchOptions.WholeWordOnly);
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.Print">
      <summary>
Prints the document.
</summary>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.GoToLastPage">
      <summary>
Moves to the last page of the document.
</summary>
      <example>The following example will show how to move to last page of the document. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Open document in viewer.
        MyPdfViewer.Open("C:\MyDocument.pdf")

        ' Move to last page.
        MyPdfViewer.GoToLastPage()
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						
			
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load += new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Open document in viewer.
            pdfViewer.Open(@"C:\MyDocument.pdf");

            // Move to last page.
            pdfViewer.GoToLastPage();
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.GoToFirstPage">
      <summary>
Moves to the first page of the document.
</summary>
      <example>The following example will show how to move to first page of the document. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Open document in Viewer.
        MyPdfViewer.Open("C:\MyDocument.pdf")

        ' Move to first page.
        MyPdfViewer.GoToFirstPage()
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load+=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Open document in Viewer.
            pdfViewer.Open(@"C:\MyDocument.pdf");

            // Move to first page.
            pdfViewer.GoToFirstPage();
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.GoToPreviousPage">
      <summary>
Moves to the previous page.
</summary>
      <returns> True if successfully moved to previous page else false. </returns>
      <example>The following example will show how to move to previous page. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Move to previous page.
        Dim bResult As Boolean = MyPdfViewer.GoToPreviousPage()

        If bResult Then
            MessageBox.Show("Successfully moved to previous page")
        Else
            MessageBox.Show("There's no previous page to move")
        End If
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load+=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Move to previous page.
            bool bResult = pdfViewer.GoToPreviousPage();

            if(bResult)
                MessageBox.Show("Successfully moved to previous page");
            else
                MessageBox.Show("There's no previous page to move");
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.GoToNextPage">
      <summary>
Moves to next page.
</summary>
      <returns> True if successfully moved to next page else false. </returns>
      <example>The following example will show how to move to next page. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Move to next page.
        Dim bResult As Boolean = MyPdfViewer.GoToNextPage()

        If bResult Then
            MessageBox.Show("Successfully moved to next page")
        Else
            MessageBox.Show("There's no next page to move")
        End If
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }		
							
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load+=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Move to next page.
            bool bResult = pdfViewer.GoToNextPage();

            if(bResult)
                MessageBox.Show("Successfully moved to next page");
            else
                MessageBox.Show("There's no next page to move");
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.GoTo(System.Int32)">
      <summary>
Moves to the page specified as parameter.
</summary>
      <param name="pageNumber">The page number to move to.</param>
      <remarks> The page number should be a non zero based index. </remarks>
      <example>The following example will show how to move to a page by specifying its number. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Open document in viewer.
        MyPdfViewer.Open("C:\MyDocument.pdf")

        ' Move to a page.
        ' PageNumber ranges from '1' to 'count' of the pages in the document.
        MyPdfViewer.GoTo(1)
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }		
			
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load+=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Open document in viewer.
            pdfViewer.Open(@"C:\MyDocument.pdf");

            // Move to a page.
			// PageNumber ranges from '1' to 'count' of the pages in the document.
            pdfViewer.GoTo(1); 
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.Navigate(ceTe.DynamicPDF.Viewer.Bookmark)">
      <summary>
Navigate to the <see cref="T:ceTe.DynamicPDF.Viewer.Bookmark" /> specified.
</summary>
      <param name="bookmark"> The <see cref="T:ceTe.DynamicPDF.Viewer.Bookmark" /> to move to.</param>
      <example>The following example will show how to get a <see cref="T:ceTe.DynamicPDF.Viewer.Bookmark" /> and navigate to it. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Get a PDF document object and open in viewer.
        Dim MyDocument As New PdfDocument("C:\MyDocument.pdf")
        MyPdfViewer.Open(MyDocument)

        ' Get a bookmark from PDF document object.
        Dim MyBookmarkList As BookmarkList = MyDocument.Bookmarks

        ' Get a bookmark from the list
		' Index ranges from 0 to n(count-1) of the bookmarks
        Dim MyBookmark As Bookmark = MyBookmarkList(0)
               
        'Navigate to a bookmark passed as parameter.
        MyPdfViewer.Navigate(MyBookmark)
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }		
							
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load+=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Get a PDF document object and open in viewer.
            PdfDocument document = new PdfDocument(@"C:\MyDocument.pdf");
            pdfViewer.Open(document);

            // Get a bookmark from PDF document object.
            BookmarkList bookmarkList = document.Bookmarks;

            // Get a bookmark from the list.
            // Index ranges from 0 to n(count-1) of the bookmarks
            Bookmark bookmark = bookmarkList[0];

            // Navigate to a bookmark passed as parameter.
            pdfViewer.Navigate(bookmark);
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.Navigate(ceTe.DynamicPDF.Viewer.View)">
      <summary>
Navigates to the <see cref="T:ceTe.DynamicPDF.Viewer.View" /> specified.
</summary>
      <param name="View"> The <see cref="T:ceTe.DynamicPDF.Viewer.View" /> to move to.</param>
      <example>The following example will show how to navigate to a view given as parameter. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Get initial view.
        Dim MyInitView As ceTe.DynamicPDF.Viewer.View = MyPdfViewer.GetInitialView()

        ' Navigate to view passed as parameter.
        MyPdfViewer.Navigate(MyInitView)
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }		
			
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load+=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Get initial view.
            ceTe.DynamicPDF.Viewer.View initView = pdfViewer.GetInitialView();

            // Navigate to view passed as parameter.
            pdfViewer.Navigate(initView);
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.NavigateToNextView">
      <summary>
Navigates to the <see cref="T:ceTe.DynamicPDF.Viewer.View" /> in next history.
</summary>
      <returns> True if successfully moved to next view else false. </returns>
      <example>The following example will show how to Navigate to the next view. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Navigate to next view.
        Dim bResult As Boolean = MyPdfViewer.NavigateToNextView()
        
        If bResult Then
            MessageBox.Show("Successfully moved to previous view")
        Else
            MessageBox.Show("There's no next view to navigate")
        End If
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }		
			
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load+=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Navigate to next view.
            bool bResult = pdfViewer.NavigateToNextView();

            if(bResult)
                MessageBox.Show("Successfully moved to next view");
            else
                MessageBox.Show("There's no next view to navigate");
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.NavigateToPreviousView">
      <summary>
Navigates to the <see cref="T:ceTe.DynamicPDF.Viewer.View" /> in previous history.
</summary>
      <returns> True if successfully moved to previous view else false. </returns>
      <example>The following example will show how to Navigate to the previous view. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Navigate to previous view.
        Dim bResult As Boolean = MyPdfViewer.NavigateToPreviousView()
        
        If bResult Then
            MessageBox.Show("Successfully moved to previous view")
        Else
            MessageBox.Show("There's no previous view to navigate")
        End If
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }		
			
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load+=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Navigate to previous view.
            bool bResult = pdfViewer.NavigateToPreviousView();

            if(bResult)
                MessageBox.Show("Successfully moved to previous view");
            else
                MessageBox.Show("There's no previous view to navigate");
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.ClearViewHistory">
      <summary>
Clears all the <see cref="T:ceTe.DynamicPDF.Viewer.View" /> present in the history.
</summary>
      <example>The following example will show how to clear all the views present in the history. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Clear all the views.
        MyPdfViewer.ClearViewHistory()
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }		

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load += new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Clear all the views.
            pdfViewer.ClearViewHistory();
        }
    }
} 
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.GetCurrentView">
      <summary>
Retrieves the current <see cref="T:ceTe.DynamicPDF.Viewer.View" /> of the document displayed.
</summary>
      <returns> This method returns the current <see cref="T:ceTe.DynamicPDF.Viewer.View" /> of the document on display. </returns>
      <example>The following example will show how to get current view and its associated data. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Open document in Viewer.
        MyPdfViewer.Open("C:\MyDocument.pdf")

        ' Get current view on display.
        Dim MyCurrentView As ceTe.DynamicPDF.Viewer.View = MyPdfViewer.GetCurrentView()
        
        ' Get the details of view.
        Dim pageNo As Integer = MyCurrentView.StartPageNumber
        Dim zoomValue As Single = MyCurrentView.ZoomPercent
        Dim MyDisplayMode As PageDisplayMode = MyCurrentView.PageDisplayMode
        Dim MySoomMode As Zoom = MyCurrentView.ZoomMode
        Dim MyPageOrientation As ceTe.DynamicPDF.Viewer.Orientation = MyCurrentView.PageOrientation
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }		

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load +=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Open document in viewer.
            pdfViewer.Open(@"C:\MyDocument.pdf");

            // Get current view on display.
            ceTe.DynamicPDF.Viewer.View currentView = pdfViewer.GetCurrentView();

            // Get the details of view.
            int pageNo = currentView.StartPageNumber;
            float zoomValue = currentView.ZoomPercent;
            PageDisplayMode displayMode = currentView.PageDisplayMode;
            Zoom zoomMode = currentView.ZoomMode;
            ceTe.DynamicPDF.Viewer.Orientation pageOrientation = currentView.PageOrientation;
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.GetInitialView">
      <summary>
Retrieves the initial <see cref="T:ceTe.DynamicPDF.Viewer.View" /> of the document displayed.
</summary>
      <returns> This method returns the initial <see cref="T:ceTe.DynamicPDF.Viewer.View" /> of the document on display. </returns>
      <example>The following example will show how to get the initial view and its associated details. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        ' Open the document in Viewer.
        MyPdfViewer.Open("C:\MyDocument.pdf")

        'Get initial view of the document.
        Dim MyInitialView As ceTe.DynamicPDF.Viewer.View = MyPdfViewer.GetInitialView()
        
        ' Get the details of view.
        Dim pageNo As Integer = MyInitialView.StartPageNumber
        Dim zoomValue As Single = MyInitialView.ZoomPercent
        Dim MyDisplayMode As PageDisplayMode = MyInitialView.PageDisplayMode
        Dim MyZoomMode As Zoom = MyInitialView.ZoomMode
        Dim MyPageOrientation As ceTe.DynamicPDF.Viewer.Orientation = MyInitialView.PageOrientation
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }				

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load+=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Open document in PdfViewwer.
            pdfViewer.Open(@"C:\MyDocument.pdf");

            //Get initial view of the document.
            ceTe.DynamicPDF.Viewer.View  initialView = pdfViewer.GetInitialView();

            // Get the details of view.
            int pageNo = initialView.StartPageNumber;
            float zoomValue = initialView.ZoomPercent;
            PageDisplayMode displayMode =  initialView.PageDisplayMode;
            Zoom zoomMode = initialView.ZoomMode;
            ceTe.DynamicPDF.Viewer.Orientation pageOrientation = initialView.PageOrientation;
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.Close">
      <summary>
Closes the opened PDF.
</summary>
      <example>This example shows, how to load a PDF document in <see cref="T:ceTe.DynamicPDF.Viewer.PdfViewer" /> and close it.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Dim MyCloseButton As New Button()
        MyCloseButton.Text = "CloseButton"
        Me.Controls.Add(MyCloseButton)
        AddHandler MyCloseButton.Click, New EventHandler(AddressOf MyCloseButton_Click)

        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Open the document in Viewer.
        MyPdfViewer.Open("C:\MyDocument.pdf")
    End Sub

    Private Sub MyCloseButton_Click(ByVal sender As Object, ByVal e As EventArgs)
        MyPdfViewer.Close()
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void InitializeComponent()
        {
            Button CloseButton = new Button();
            CloseButton.Text = "CloseButton";
            this.Controls.Add(CloseButton);
            CloseButton.Click+= new EventHandler(CloseButton_Click);
			
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load +=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            pdfViewer.Open(@"C:\MyDocument.pdf");
        }

        private void CloseButton_Click(object sender, EventArgs e)
        {
            pdfViewer.Close();
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.Open(ceTe.DynamicPDF.Viewer.PdfDocument)">
      <summary>
Opens a new PDF using <see cref="T:ceTe.DynamicPDF.Viewer.PdfDocument" />.
</summary>
      <example>This example shows, how to load a PDF document in <see cref="T:ceTe.DynamicPDF.Viewer.PdfViewer" /> using <see cref="T:ceTe.DynamicPDF.Viewer.PdfDocument" />.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        ' Load and open the document in Viewer.
        Dim MyDocument As New PdfDocument("C:\MyDocument.pdf")
        MyPdfViewer.Open(MyDocument)
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
            this.Load += new EventHandler(Form1_Load);
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Load and open the document in Viewer.
            PdfDocument document = new PdfDocument(@"C:\MyDocument.pdf");
            pdfViewer.Open(document);
        }
    }
}
</code></example>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.Open(System.String)">
      <summary>
Opens a PDF document.
</summary>
      <example>This example shows, how to load a PDF document in <see cref="T:ceTe.DynamicPDF.Viewer.PdfViewer" />.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        ' open the document using the file path.
        MyPdfViewer.Open("C:\MyDocument.pdf")
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
            this.Load += new EventHandler(Form1_Load);
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // open the document using the file path.
            pdfViewer.Open(@"C:\MyDocument.pdf");
        }
    }
}
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.PagePrinting">
      <summary>
Occurs before the start of printing a PDF page.
</summary>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.DocumentPrinted">
      <summary>
Occurs after the printing of the last page of the PDF document.
</summary>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.DocumentPrinting">
      <summary>
Occurs before the start of the PDF document printing.
</summary>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.PdfViewerMouseMove">
      <summary>
Occurs when user moves the mouse pointer on a PdfViewer control.
</summary>
      <example>This example demonstrates, how to get the mouse move event with information about
the page co-ordinates using <see cref="T:ceTe.DynamicPDF.Viewer.PdfViewerMouseEventArgs" /> class. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.PdfViewerMouseMove, AddressOf MyPdfViewer_MouseMoved
    End Sub

    Private Sub MyPdfViewer_MouseMoved(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.PdfViewerMouseEventArgs)
        ' Get the co-ordinates on the control.
        Dim ControlCoordinate As Point = e.Location
        
        ' Get the page number.
        Dim PageNumber As Integer = e.PageNumber
        
        ' Get the co-ordinates on the page (in PDF points).
        Dim PageCoordinateX As Integer = e.PageX
        Dim PageCoordinateY As Integer = e.PageY
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
             InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																																			

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.PdfViewerMouseMove += new ceTe.DynamicPDF.Viewer.PdfViewerMouseEventHandler(this.pdfViewer_MouseMoved);
        }

        private void pdfViewer_MouseMoved(object sender, ceTe.DynamicPDF.Viewer.PdfViewerMouseEventArgs e)
        {
            // Get the co-ordinates on the control.
            Point controlCoordinate = e.Location;

            // Get the page number.
             int pageNumber = e.PageNumber;

            // Get the co-ordinates on the page (in PDF points).
            int pageCoordinateX = e.PageX;
            int pageCoordinateY = e.PageY;
        }
    }
}         
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.PdfViewerMouseClick">
      <summary>
Occurs when user clicks on a PdfViewer control.
</summary>
      <example>This example demonstrates, how to get the click event with information about
the page co-ordinates using <see cref="T:ceTe.DynamicPDF.Viewer.PdfViewerMouseEventArgs" /> class. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.PdfViewerMouseClick, AddressOf MyPdfViewer_MouseClicked
    End Sub

    Private Sub MyPdfViewer_MouseClicked(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.PdfViewerMouseEventArgs)
        ' Get the co-ordinates on the control.
        Dim ControlCoordinate As Point = e.Location
        
        ' Get the page number.
        Dim PageNumber As Integer = e.PageNumber
        
        ' Get the co-ordinates on the page (in PDF points).
        Dim PageCoordinateX As Integer = e.PageX
        Dim PageCoordinateY As Integer = e.PageY
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
             InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																																			

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.PdfViewerMouseClick += new ceTe.DynamicPDF.Viewer.PdfViewerMouseEventHandler(this.pdfViewer_MouseClicked);
        }

        private void pdfViewer_MouseClicked(object sender, ceTe.DynamicPDF.Viewer.PdfViewerMouseEventArgs e)
        {
            // Get the co-ordinates on the control.
            Point controlCoordinate = e.Location;

            // Get the page number.
             int pageNumber = e.PageNumber;

            // Get the co-ordinates on the page (in PDF points).
            int pageCoordinateX = e.PageX;
            int pageCoordinateY = e.PageY;
        }
    }
}         
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.LinkClicked">
      <summary>
Occurs when user clicks on a link.
</summary>
      <example>This example demonstrates, how to get the link Action and how to cancel the 
action associated with the link using <see cref="T:ceTe.DynamicPDF.Viewer.LinkClickedEventArgs" /> class. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.LinkClicked, AddressOf MyPdfViewer_LinkClicked
    End Sub

    Private Sub MyPdfViewer_LinkClicked(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.LinkClickedEventArgs)
        ' Get the action associated with the link.
        Dim MyAction As ceTe.DynamicPDF.Viewer.Action = e.Action
        
        ' Get the action type.
        Dim MyActionType As ceTe.DynamicPDF.Viewer.ActionType = MyAction.ActionType

        ' Cancel the action associated with the link
        e.Cancel = True
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
             InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																																			

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.LinkClicked += new ceTe.DynamicPDF.Viewer.LinkClickEventHandler(this.pdfViewer_LinkClicked);
        }

        private void pdfViewer_LinkClicked(object sender, ceTe.DynamicPDF.Viewer.LinkClickedEventArgs e)
        {
            // Get the action associated with the link.
            ceTe.DynamicPDF.Viewer.Action action = e.Action;

            // Get the action type.
            ceTe.DynamicPDF.Viewer.ActionType actionType = action.ActionType;

            // Cancel the action associated with the link
            e.Cancel = true;
        }
    }
}         
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.ContextMenuShowing">
      <summary>
Occurs when the control's context menu is being displayed.
</summary>
      <example>This example demonstrates, how to hide/show the context menu , override the context menu of the control with a new one and 
setting the type context using <see cref="T:ceTe.DynamicPDF.Viewer.ContextMenuShowingEventArgs" /> class. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.ContextMenuShowing, AddressOf MyPdfViewer_ContextMenuShowing
    End Sub

    Private Sub MyPdfViewer_ContextMenuShowing(ByVal sender As Object, ByVal e As ContextMenuShowingEventArgs)
        ' Suppress the control's existing context menu with a new context menu.
        e.AssignedContextMenu = New ContextMenuStrip()

        ' Create new ToolStripMenuItem and add it to AssignedContextMenu.
        Dim MyToolStripMenuitem1 As New ToolStripMenuItem()
        MyToolStripMenuitem1.Text = "Rotate"
        e.AssignedContextMenu.Items.Add(MyToolStripMenuitem1)

        ' Create new ToolStripMenuItem and add it to AssignedContextMenu.
        Dim MyToolStripMenuitem2 As New ToolStripMenuItem()
        MyToolStripMenuitem2.Text = "View"
        e.AssignedContextMenu.Items.Add(MyToolStripMenuitem2)

        ' Set the value to hide/show the context menu.
        e.Cancel = True
     End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
             InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																															

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.ContextMenuShowing += new ceTe.DynamicPDF.Viewer.ContextMenuShowingEventHandler(this.pdfViewer_ContextMenuShowing);
        }

        private void pdfViewer_ContextMenuShowing(object sender, ceTe.DynamicPDF.Viewer.ContextMenuShowingEventArgs e)
        {
            // Suppress the control's existing context menu with a new context menu.
            e.AssignedContextMenu = new ContextMenuStrip();

            // Create new ToolStripMenuItem and add it to AssignedContextMenu.
            ToolStripMenuItem toolStripMenuitem1 = new ToolStripMenuItem();
            toolStripMenuitem1.Text = "Rotate";
            e.AssignedContextMenu.Items.Add(toolStripMenuitem1);

            // Create new ToolStripMenuItem and add it to AssignedContextMenu.
            ToolStripMenuItem toolStripMenuitem2 = new ToolStripMenuItem();
            toolStripMenuitem2.Text = "View";
            e.AssignedContextMenu.Items.Add(toolStripMenuitem2);

            // Set the value to hide/show the context menu.
            e.Cancel = true;
        }
    }
}         
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.CursorModeChanged">
      <summary>
Occurs when the cursor mode is changed.
</summary>
      <example>This example demonstrates, how to get the current cursor mode using <see cref="T:ceTe.DynamicPDF.Viewer.CursorModeChangedEventArgs" /> class. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.CursorModeChanged, AddressOf MyPdfViewer_CursorModeChanged
    End Sub

    Private Sub MyPdfViewer_CursorModeChanged(ByVal sender As Object, ByVal e As CursorModeChangedEventArgs)
        ' Get the current cursor mode.
        Dim MyCursorMode As CursorMode = e.CursorMode
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																																			

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.CursorModeChanged += new ceTe.DynamicPDF.Viewer.CursorModeChangedEventHandler(this.pdfViewer_CursorModeChanged);
        }

        private void pdfViewer_CursorModeChanged(object sender, ceTe.DynamicPDF.Viewer.CursorModeChangedEventArgs e)
        {
            // Get the current cursor mode.
            CursorMode cursorMode = e.CursorMode;
        }
    }
}        
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.TextSelected">
      <summary>
Occurs when the text selection is completed.
</summary>
      <example>This example shows how to get selected text, when text selection done using <see cref="E:ceTe.DynamicPDF.Viewer.PdfViewer.TextSelected" /> event.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.TextSelected, AddressOf MyPdfViewer_TextSelected
    End Sub

    Private Sub MyPdfViewer_TextSelected(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.TextSelectedEventArgs)
		' Get the selected text.
        Dim MySelectedText As String = e.SelectedText
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																															

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.TextSelected += new ceTe.DynamicPDF.Viewer.TextSelectedEventHandler(this.pdfViewer_TextSelected);
        }

        private void pdfViewer_TextSelected(object sender, ceTe.DynamicPDF.Viewer.TextSelectedEventArgs e)
        {
            // Get the selected text.
            string selectedText = e.SelectedText;
        }
    }
}     
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.TextSelecting">
      <summary>
Occurs when the text is being selected.
</summary>
      <example>This example shows how to disable or cancel text selection using <see cref="E:ceTe.DynamicPDF.Viewer.PdfViewer.TextSelecting" /> event.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.TextSelecting, AddressOf MyPdfViewer_TextSelecting
    End Sub

    Private Sub MyPdfViewer_TextSelecting(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.TextSelectingEventArgs)
        ' Cencel the text selection.
        e.Cancel = True
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																											

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.TextSelecting += new ceTe.DynamicPDF.Viewer.TextSelectingEventHandler(this.pdfViewer_TextSelecting);
        }

        private void pdfViewer_TextSelecting(object sender, ceTe.DynamicPDF.Viewer.TextSelectingEventArgs e)
        {
            // Cancel the text selection.
            e.Cancel = true;
        }
    }
}        
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.ViewChanged">
      <summary>
Occurs each time when the view of the display is changed.
</summary>
      <example>This example demonstrates, how to get the changed view and add it to history using <see cref="T:ceTe.DynamicPDF.Viewer.ViewChangedEventArgs" /> class. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.ViewChanged, AddressOf MyPdfViewer_ViewChanged
    End Sub

    Private Sub MyPdfViewer_ViewChanged(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.ViewChangedEventArgs)
        ' Get the changed view.
        Dim changedView As ceTe.DynamicPDF.Viewer.View = e.PreviousView
        
        ' Setting to false, will exclude this view from storing into the view history.
        e.AddViewToHistory = False
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																								

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.ViewChanged += new ceTe.DynamicPDF.Viewer.ViewChangedEventHandler(this.pdfViewer_ViewChanged);
        }

        private void pdfViewer_ViewChanged(object sender, ceTe.DynamicPDF.Viewer.ViewChangedEventArgs e)
        {
            // Get the changed view.
            ceTe.DynamicPDF.Viewer.View changedView = e.PreviousView;

            // Setting to false, will exclude this view from storing into the view history.
            e.AddViewToHistory = false;
        }
    }
}         
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.SearchDialogShowing">
      <summary>
Occurs when the search dialog is being displayed.
</summary>
      <example>This example shows, how to hide the search dialog and set the match option for search using <see cref="E:ceTe.DynamicPDF.Viewer.PdfViewer.SearchDialogShowing" /> event.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.SearchDialogShowing, AddressOf MyPdfViewer_SearchDialogShowing
    End Sub

    Private Sub MyPdfViewer_SearchDialogShowing(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.SearchDialogShowingEventArgs)
        ' Hide the search dialog.
        e.Cancel = True

        ' Set the match option for search
        e.MatchOption = MatchOptions.WholeWordOnly
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																				

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.SearchDialogShowing += new ceTe.DynamicPDF.Viewer.SearchDialogShowingEventHandler(this.pdfViewer_SearchDialogShowing);
        }

        private void pdfViewer_SearchDialogShowing(object sender, ceTe.DynamicPDF.Viewer.SearchDialogShowingEventArgs e)
        {
            // Hide the search dialog.
            e.Cancel = true;

            // Set the match option for search
            e.MatchOption = MatchOptions.WholeWordOnly;
        }
    }
}
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.Searched">
      <summary>
Occurs when the search term is found successfully.
</summary>
      <example>This example demonstrates, how to get the count of successful search results and status of search completion
using <see cref="T:ceTe.DynamicPDF.Viewer.SearchedEventArgs" /> class. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.Searched, AddressOf pdfViewer_Searched
    End Sub

    Private Sub pdfViewer_Searched(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.SearchedEventArgs)
        ' Get the status of search completion.
        Dim isCompleted As Boolean = e.Completed

        ' Get the count of search results found.
        Dim count As Integer = e.Count
    End Sub
End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.Searched += new ceTe.DynamicPDF.Viewer.SearchedEventHandler(this.pdfViewer_Searched);
        }

        private void pdfViewer_Searched(object sender, ceTe.DynamicPDF.Viewer.SearchedEventArgs e)
        {
            // Get the status of search completion.
            bool isCompleted = e.Completed;

            // Get the count of search results found.
            int count = e.Count;
        }
    }
}         
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.SearchProgressing">
      <summary>
Occurs when the search for a string is in progress.
</summary>
      <remarks> To cancel the search which is in progress set the value of Cancel to true otherwise by default it is false. </remarks>
      <example>This example demonstrates, how to get the search term, match option used, current page numberwhere search is going on 
and cancelling the search using <see cref="T:ceTe.DynamicPDF.Viewer.SearchProgressingEventArgs" /> class. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.SearchProgressing, AddressOf MyPdfViewer_SearchProgressing
    End Sub

    Private Sub MyPdfViewer_SearchProgressing(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.SearchProgressingEventArgs)
        ' Get the search string.
        Dim MysearchTerm As String = e.SearchTerm

        ' Get the Match option used for searching.
        Dim [option] As MatchOptions = DirectCast(e.MatchOption, MatchOptions)

        ' If user wants to cancel the search. Use the below commented code.
        'e.Cancel = true;

        ' Get the current page number where search is in progress.
        Dim pagenumber As Integer = e.CurrentPageNumber
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }												

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.SearchProgressing += new ceTe.DynamicPDF.Viewer.SearchProgressingEventHandler(this.pdfViewer_SearchProgressing);
        }

        private void pdfViewer_SearchProgressing(object sender, ceTe.DynamicPDF.Viewer.SearchProgressingEventArgs e)
        {
            // Get the search string.
            string searchTerm = e.SearchTerm;

            // Get the Match option used for searching.
            MatchOptions option = (MatchOptions)e.MatchOption;

            // If user wants to cancel the search. Use the below commented code.
            //e.Cancel = true;

            // Get the current page number where search is in progress.
            int pagenumber = e.CurrentPageNumber;
        }
    }
}         
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.DocumentDisplayed">
      <summary>
Occurs after the PDF document is displayed.
</summary>
      <example>This example shows, how to get displayed PDF document details using <see cref="E:ceTe.DynamicPDF.Viewer.PdfViewer.DocumentDisplayed" /> event.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.DocumentDisplayed, AddressOf MyPdfViewer_DocumentDisplayed
    End Sub

    Private Sub MyPdfViewer_DocumentDisplayed(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.DocumentDisplayedEventArgs)
        ' Get the displayed PDF document details.
        Dim Author As String = e.Document.Author
        Dim MyBookmarks As BookmarkList = e.Document.Bookmarks
        Dim Creator As String = e.Document.Creator
        Dim Keywords As String = e.Document.Keywords
        Dim PageCount As Integer = e.Document.PageCount
        Dim Producer As String = e.Document.Producer
        Dim Subject As String = e.Document.Subject
        Dim Title As String = e.Document.Title
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }								

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.DocumentDisplayed += new ceTe.DynamicPDF.Viewer.DocumentDisplayedEventHadler(this.pdfViewer_DocumentDisplayed);
        }

        private void pdfViewer_DocumentDisplayed(object sender, ceTe.DynamicPDF.Viewer.DocumentDisplayedEventArgs e)
        {
            // Get the displayed PDF document details.
            string Author = e.Document.Author;
            BookmarkList Bookmarks = e.Document.Bookmarks;
            string Creator = e.Document.Creator;
            string Keywords = e.Document.Keywords;
            int PageCount = e.Document.PageCount;
            string Producer = e.Document.Producer;
            string Subject = e.Document.Subject;
            string Title = e.Document.Title;
        }
    }
}
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.DocumentDisplaying">
      <summary>
Occurs before the PDF document is displayed.
</summary>
      <example>This example shows, how to cancel a PDF file opening using <see cref="E:ceTe.DynamicPDF.Viewer.PdfViewer.DocumentDisplaying" /> event<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.DocumentDisplaying, AddressOf MyPdfViewer_DocumentDisplaying
    End Sub

    Private Sub MyPdfViewer_DocumentDisplaying(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.DocumentDisplayingEventArgs)
        ' Setting the navigation panel's visible tab while displaying the document.
        e.InitialVisibleNavigationPane = ceTe.DynamicPDF.Viewer.NavigationPane.Bookmark
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }				
			
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.DocumentDisplaying += new ceTe.DynamicPDF.Viewer.DocumentDisplayingEventHandler(this.pdfViewer_DocumentDisplaying);
        }

        private void pdfViewer_DocumentDisplaying(object sender, ceTe.DynamicPDF.Viewer.DocumentDisplayingEventArgs e)
        {
            // Setting the navigation panel's visible tab while displaying the document.
            e.InitialVisibleNavigationPane = ceTe.DynamicPDF.Viewer.NavigationPane.Bookmark;
        }
    }
}

</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.FileOpenDialogShowing">
      <summary>
Occurs when the file open dialog is being displayed.
</summary>
      <example>This example shows, how to set initial directory of displaying file dialog using <see cref="E:ceTe.DynamicPDF.Viewer.PdfViewer.FileOpenDialogShowing" /> event.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.FileOpenDialogShowing, AddressOf MyPdfViewer_FileOpenDialogShowing
    End Sub

    Private Sub MyPdfViewer_FileOpenDialogShowing(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.FileOpenDialogShowingEventArgs)
        ' Set the initial directory for the file dialog window.
        e.InitialDirectory = "MyFolderPath"
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.FileOpenDialogShowing += new ceTe.DynamicPDF.Viewer.FileOpenDialogShowingEventHandler(this.pdfViewer_FileOpenDialogShowing);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }				

        private void pdfViewer_FileOpenDialogShowing(object sender, ceTe.DynamicPDF.Viewer.FileOpenDialogShowingEventArgs e)
        {
            // Set the initial directory for the file dialog window.
            e.InitialDirectory = "MyFolderPath";
        }
    }
}
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.FileOpenFailed">
      <summary>
Occurs when the PDF file open failed.
</summary>
      <example>This example shows ,how to access  exception details using  <see cref="E:ceTe.DynamicPDF.Viewer.PdfViewer.FileOpenFailed" /> event, in the case of PDF document open failure.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.FileOpenFailed, AddressOf MyPdfViewer_FileOpenFailed 
    End Sub

    Private Sub MyPdfViewer_FileOpenFailed(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.FileOpenFailedEventArgs)
        ' Get the exception.
        Dim failReason As String = e.Exception.Message
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.FileOpenFailed += new ceTe.DynamicPDF.Viewer.FileOpenFailedEventHandler(this.pdfViewer_FileOpenFailed);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void pdfViewer_FileOpenFailed(object sender, ceTe.DynamicPDF.Viewer.FileOpenFailedEventArgs e)
        {
            // Get the exception.
            string failReason = e.Exception.Message;
        }
    }
}
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.FileOpened">
      <summary>
Occurs after the PDF file is opened.
</summary>
      <example>This example shows, how to get displayed PDF document details using <see cref="E:ceTe.DynamicPDF.Viewer.PdfViewer.FileOpened" /> event.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.FileOpened, AddressOf MyPdfViewer_FileOpened 
    End Sub

    Private Sub MyPdfViewer_FileOpened(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.FileOpenedEventArgs)
        ' Get the displayed PDF document details.
        Dim Author As String = e.PdfDocument.Author
        Dim MyBookmarks As BookmarkList = e.PdfDocument.Bookmarks
        Dim Creator As String = e.PdfDocument.Creator
        Dim Keywords As String = e.PdfDocument.Keywords
        Dim PageCount As Integer = e.PdfDocument.PageCount
        Dim Producer As String = e.PdfDocument.Producer
        Dim Subject As String = e.PdfDocument.Subject
        Dim Title As String = e.PdfDocument.Title
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.FileOpened += new ceTe.DynamicPDF.Viewer.FileOpenedEventHandler(this.pdfViewer_FileOpened);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void pdfViewer_FileOpened(object sender, ceTe.DynamicPDF.Viewer.FileOpenedEventArgs e)
        {
            // Getting displayed PDF document details.
            string Author = e.PdfDocument.Author;
            BookmarkList Bookmarks = e.PdfDocument.Bookmarks;
            string Creator = e.PdfDocument.Creator;
            string Keywords = e.PdfDocument.Keywords;
            int PageCount = e.PdfDocument.PageCount;
            string Producer = e.PdfDocument.Producer;
            string Subject = e.PdfDocument.Subject;
            string Title = e.PdfDocument.Title;
        }
    }
}
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.PasswordRequired">
      <summary>
Occurs when the PDF file needed a password to open.
</summary>
      <example>This example shows,how to set password of a PDF file using <see cref="E:ceTe.DynamicPDF.Viewer.PdfViewer.PasswordRequired" /> event<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.PasswordRequired, AddressOf pdfViewer_PasswordRequired 
    End Sub

    Private Sub pdfViewer_PasswordRequired(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.PasswordRequiredEventArgs)
        ' Setting PDF password to open the file.
        e.Password = "mypassword"
    End Sub

    End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.PasswordRequired += new ceTe.DynamicPDF.Viewer.PasswordRequiredEventHandler(this.pdfViewer_PasswordRequired);
        }

        private void pdfViewer_PasswordRequired(object sender, ceTe.DynamicPDF.Viewer.PasswordRequiredEventArgs e)
        {
            // Setting PDF password to open the file.
            e.Password = "mypassword";
        }
    }
}
</code></example>
    </member>
    <member name="E:ceTe.DynamicPDF.Viewer.PdfViewer.FileOpening">
      <summary>
Occurs before the PDF file is opened.
</summary>
      <example>This example shows, how to cancel a PDF file open using the <see cref="E:ceTe.DynamicPDF.Viewer.PdfViewer.FileOpening" /> event.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.FileOpening, AddressOf MyPdfViewer_FileOpening
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub MyPdfViewer_FileOpening(ByVal sender As Object, ByVal e As ceTe.DynamicPDF.Viewer.FileOpeningEventArgs)
        ' Cancel the file open.             
        e.Cancel = True
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.FileOpening += new ceTe.DynamicPDF.Viewer.FileOpeningEventHandler(this.pdfViewer_FileOpening);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void pdfViewer_FileOpening(object sender, ceTe.DynamicPDF.Viewer.FileOpeningEventArgs e)
        {
            // Cancel the file open.
            e.Cancel = true;
        }
    }
}
</code></example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.ViewerToolbar">
      <summary>
Gets or sets the toolbar of the viewer control.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.FilePath">
      <summary>
Gets the file path of the document on display.
</summary>
      <remarks> The value will be null when the document on display is opened by passing <see cref="T:ceTe.DynamicPDF.Viewer.PdfDocument" /> to the Open method. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.VisibleNavigationPane">
      <summary>
Gets or sets the value of navigation pane to be visible for displayed document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.ZoomPercent">
      <summary>
Gets or sets the value of page zoom percent for displayed document.
</summary>
      <remarks> This value ranges from .01f to 64.0f. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.CursorMode">
      <summary>
Gets or sets the cursor mode for the document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.ZoomMode">
      <summary>
Gets or sets the Zoom Mode of the document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.PageMode">
      <summary>
Gets or sets the Page Display mode of the document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.PageOrientation">
      <summary>
Gets or sets the Orientation of the page.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.HasNextView">
      <summary>
Gets a boolean value to show if next view history contains any view or not.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.HasPreviousView">
      <summary>
Gets a boolean value to show if previous view history contains any view or not.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.NavigationPanelWidth">
      <summary>
Gets or sets the navigation panel width.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.ShowThumbnailIcon">
      <summary>
Gets or sets the value to show/hide thumbnails icon in navigation panel.
</summary>
      <remarks> True value will show the thumbnail icon in the navigation panel. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.ShowBookmarkIcon">
      <summary>
Gets or sets the value to show/hide the bookmarks icon in navigation panel.
</summary>
      <remarks> True value will show the bookmark icon in the navigation panel. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.PageColor">
      <summary>
Gets or sets the Page Color of the document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.ShowToolbar">
      <summary>
Gets or sets the boolean to show/hide the toolbar.
</summary>
      <remarks> True value will show the toolbar. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.InitialVisibleNavigationPane">
      <summary>
Gets or sets the value of navigation pane to be visible when displaying a document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.InitialOrientation">
      <summary>
Gets or sets the value of page orientation when displaying a document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.InitialZoomPercent">
      <summary>
Gets or sets the value of page zoom percent when displaying a document.
</summary>
      <remarks> This value ranges from .01f to 64.0f. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.InitialZoomMode">
      <summary>
Gets or sets the value of page zoom mode when displaying a document.
</summary>
      <remarks> If zoom percent mode is selected then the value of <see cref="P:ceTe.DynamicPDF.Viewer.PdfViewer.InitialZoomPercent" /> has to be specified. Otherwise it will be .01f by default. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.InitialPageMode">
      <summary>
Gets or sets the value of page mode when displaying a document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewer.InitialPage">
      <summary>
Gets or sets the value of initial page when displaying a document.
</summary>
      <remarks> The value should be a positive number and it will be 0 by default in case if it exceeds the total number of pages or not set. </remarks>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfViewer.#ctor">
      <summary>
Initializes a new instance of the PdfViewer class.
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.PdfViewer">
      <summary>
Represents the PdfViewer control.
</summary>
      <example>This example shows, how to load a PDF document in <see cref="T:ceTe.DynamicPDF.Viewer.PdfViewer" />.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        ' Load and Open the document in Viewer.
        Dim MyDocument As New PdfDocument("C:\MyDocument.pdf")
        MyPdfViewer.Open(MyDocument)
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
            this.Load += new EventHandler(Form1_Load);
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Load and Open the document in Viewer.
            PdfDocument document = new PdfDocument(@"C:\MyDocument.pdf");
            pdfViewer.Open(document);
        }
    }
}
</code></example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.ExceptionOccurredEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:ExceptionOccurred" /> event.
</summary>
      <remarks>When you create a <b>ExceptionOccurredEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.ExceptionOccurredEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:ExceptionOccurred" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.PagePrintingEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:PagePrinting" /> event.
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.DocumentPrintedEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:DocumentPrinted" /> event.
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.DocumentPrintingEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:DocumentPrinting" /> event.
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.PdfViewerMouseEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:PdfViewerMouseClick" /> or <see cref="!:PdfViewerMouseMove" /> event.
</summary>
      <remarks>When you create a <b>PdfViewerMouseEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.PdfViewerMouseEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:PdfViewerMouseClick" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.LinkClickEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:LinkClicked" /> event.
</summary>
      <remarks>When you create a <b>LinkClickEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.LinkClickedEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:LinkClicked" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.ContextMenuShowingEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:ContextMenuShowing" /> event.
</summary>
      <remarks>When you create a <b>ContextMenuShowingEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.ContextMenuShowingEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:ContextMenuShowing" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.CursorModeChangedEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:CursorModeChanged" /> event.
</summary>
      <remarks>When you create a <b>CursorModeChangedEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.CursorModeChangedEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:CursorModeChanged" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.TextSelectedEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:TextSelected" /> event.
</summary>
      <remarks>When you create a <b>TextSelectedEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.TextSelectedEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:TextSelected" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.TextSelectingEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:TextSelecting" /> event.
</summary>
      <remarks>When you create a <b>TextSelectingEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.TextSelectingEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:TextSelecting" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.ViewChangedEventHandler">
      <summary>
Represents the mehtod that will handle the <see cref="!:ViewChanged" /> event.
</summary>
      <remarks>When you create a <b>ViewChangedEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.ViewChangedEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:ViewChanged" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.DocumentDisplayedEventHadler">
      <summary>
Represents the method that will handle the <see cref="!:DocumentDisplayed" /> event.
</summary>
      <remarks>When you create a <b>DocumentDisplayedEventHadler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.DocumentDisplayedEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:DocumentDisplayed" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.DocumentDisplayingEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:DocumentDisplaying" /> event.
</summary>
      <remarks>When you create a <b>DocumentDisplayingEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.DocumentDisplayingEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:DocumentDisplaying" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.FileOpenDialogShowingEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:FileOpenDialogShowing" /> event.
</summary>
      <remarks>When you create a <b>FileOpenDialogShowingEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.FileOpenDialogShowingEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:FileOpenDialogShowing" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.FileOpenFailedEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:FileOpenFailed" /> event.
</summary>
      <remarks>When you create a <b>FileOpenFailedEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.FileOpenFailedEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:FileOpenFailed" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.FileOpenedEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:FileOpened" /> event.
</summary>
      <remarks>When you create a <b>FileOpenedEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.FileOpenedEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:FileOpened" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.PasswordRequiredEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:PasswordRequired" /> event.
</summary>
      <remarks>When you create a <b>PasswordRequiredEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.PasswordRequiredEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:PasswordRequired" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.FileOpeningEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:FileOpening" /> event.
</summary>
      <remarks>When you create a <b>FileOpeningEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.FileOpeningEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:FileOpening" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.SearchDialogShowingEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:SearchDialogShowing" /> event.
</summary>
      <remarks>When you create a <b>SearchDialogShowingEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.SearchDialogShowingEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:SearchDialogShowing" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.SearchedEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:Searched" /> event.
</summary>
      <remarks>When you create a <b>SearchedEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.SearchedEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:Searched" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.SearchProgressingEventHandler">
      <summary>
Represents the method that will handle the <see cref="!:SearchProgressing" /> event.
</summary>
      <remarks>When you create a <b>SearchProgressingEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ceTe.DynamicPDF.Viewer.SearchProgressingEventArgs" /> that contains the event data.</param>
      <example> For example refer to <see cref="!:SearchProgressing" /> event. </example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.ExceptionOccurredEventArgs.Exception">
      <summary>
Gets the Exception.
</summary>
      <Remarks>Gets the Exception object which contains the details about the occurred exception.</Remarks>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.ExceptionOccurredEventArgs">
      <summary>
Provides data for the <see cref="!:ExceptionOccurred" /> event. 
</summary>
      <example>For example refer to <see cref="!:ExceptionOccurred" /> event.</example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.DocumentPrintingEventArgs.CancelPrinting">
      <summary>
Gets or sets a boolean. Setting true will cancel the printing.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.DocumentPrintingEventArgs.PrinterName">
      <summary>
Gets the printer name to which the document is going to be printed.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.DocumentPrintingEventArgs.Document">
      <summary>
Gets the PdfDocument.
</summary>
      <Remarks>Gets the PDF document currently displayed.</Remarks>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.DocumentPrintingEventArgs">
      <summary>
Provides data for the <see cref="!:DocumentPrinting" /> event. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewerMouseEventArgs.PageY">
      <summary>
Gets the y-coordinate of the mouse during the generating mouse event. 
</summary>
      <remarks> If the event is generated out side of the PDF page then its value will be set to -1.  </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewerMouseEventArgs.PageX">
      <summary>
Gets the x-coordinate of the mouse on PDF page during the generating mouse event. 
</summary>
      <remarks> If the event is generated out side of the PDF page then its value will be set to -1.  </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewerMouseEventArgs.PageNumber">
      <summary>
Gets the page number of the PDF page during the generating mouse event. 
</summary>
      <remarks> Page number starts from 1. If the event is generated out side of the PDF page then its value will be set to -1.  </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewerMouseEventArgs.Y">
      <summary>
Gets the y-coordinate of the mouse during the generating mouse event. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewerMouseEventArgs.X">
      <summary>
Gets the x-coordinate of the mouse during the generating mouse event. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewerMouseEventArgs.Location">
      <summary>
Gets the location of the mouse during the generating mouse event. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewerMouseEventArgs.Clicks">
      <summary>
Gets the number of times the mouse button was pressed and released. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfViewerMouseEventArgs.Button">
      <summary>
Gets the Button object which contains the information about the mouse button associated with the event. 
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.PdfViewerMouseEventArgs">
      <summary>
Provides data for the <see cref="!:PdfViewerMouseClick" /> and <see cref="!:PdfViewerMouseMove" /> event. 
</summary>
      <example> For example refer to <see cref="!:PdfViewerMouseClick" /> event. </example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.LinkClickedEventArgs.Cancel">
      <summary>
Gets or sets the boolean. 
</summary>
      <remarks>  If cancel variable is set to true the control will not follow the link action. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.LinkClickedEventArgs.Action">
      <summary>
Gets the <see cref="P:ceTe.DynamicPDF.Viewer.LinkClickedEventArgs.Action" /> object which contains the information about the hyperlink. 
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.LinkClickedEventArgs">
      <summary>
Provides data for the <see cref="!:LinkClicked" /> event. 
</summary>
      <example> For example refer to <see cref="!:LinkClicked" /> event. </example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.Action.ActionType">
      <summary>
Gets the action type of the link.
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.Action">
      <summary>
Specifies the action information of the link.
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.ActionType">
      <summary>
Specifies the action types of the links. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.ActionType.Launch">
      <summary>
Launch an application or open a file. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.ActionType.URI">
      <summary>
Universal Resource Identifier, including web pages and other Internet based resources. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.ActionType.RemoteGoTo">
      <summary>
Go to a destination within another document. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.ActionType.GoTo">
      <summary>
Go to a destination within current document. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.ActionType.UnSupported">
      <summary>
Unsupported action type. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.SearchDialogShowingEventArgs.MatchOption">
      <summary>
Gets or Sets the match option to use for searching.
</summary>
      <Remarks> If not set it will use the default matching option for search. </Remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.SearchDialogShowingEventArgs.Cancel">
      <summary>
Gets or sets a boolean. 
</summary>
      <Remarks> True value will hide the search dialog of the control. </Remarks>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.SearchDialogShowingEventArgs">
      <summary>
Provides data for the <see cref="!:SearchDialogShowing" /> event. 
</summary>
      <example>For example refer to <see cref="!:SearchDialogShowing" /> event.</example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.ContextMenuShowingEventArgs.MenuContextType">
      <summary>
Gets the context type. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.ContextMenuShowingEventArgs.AssignedContextMenu">
      <summary>
Gets or sets the context menu of the control. 
</summary>
      <remarks> If assigned context menu is not set viewer will sets its own context menu for the control. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.ContextMenuShowingEventArgs.Cancel">
      <summary>
Gets or sets the boolean value. 
</summary>
      <remark> True value will hide the context menu and false will show the context menu. </remark>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.ContextMenuShowingEventArgs">
      <summary>
Provides data for the <see cref="!:ContextMenuShowing" /> event. 
</summary>
      <example> For example refer to <see cref="!:ContextMenuShowing" /> event. </example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.ContextType">
      <summary>
Specifies the type of context. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.ContextType.TextSelected">
      <summary>
Indicates the context when the text is selected. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.ContextType.General">
      <summary>
Indicates the general context when there are no applicable conditions. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.CursorModeChangedEventArgs.CursorMode">
      <summary>
Gets the cursor mode. 
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.CursorModeChangedEventArgs">
      <summary>
Provides data for the <see cref="!:CursorModeChanged" /> event. 
</summary>
      <example> For example refer to <see cref="!:CursorModeChanged" /> event. </example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.SearchedEventArgs.ShowSearchCompleteDialog">
      <summary>
Gets or sets a boolean. 
</summary>
      <remarks> false value will hide the search complete message dialog. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.SearchedEventArgs.Count">
      <summary>
Gets the count of successful search result. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.SearchedEventArgs.Completed">
      <summary>
Gets a boolean value which shows the search is completed or not. 
</summary>
      <remarks> True value indicates search is completed. </remarks>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.SearchedEventArgs">
      <summary>
Provides  data for the <see cref="!:Searched" /> event. 
</summary>
      <remarks> This event is fired after every successful search. </remarks>
      <example> For example refer to <see cref="!:Searched" /> event. </example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.FileOpenFailedEventArgs.ShowFileOpenFailedDialog">
      <summary>
Gets or sets a boolean. 
</summary>
      <remarks> false value will hide the file open failed message dialog. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.FileOpenFailedEventArgs.Exception">
      <summary>
Gets the exception related to the PDF file open failure.
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.FileOpenFailedEventArgs">
      <summary>
Provides data for the <see cref="!:FileOpenFailed" /> event. 
</summary>
      <example>For example refer to <see cref="!:FileOpenFailed" /> event.</example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.DocumentDisplayedEventArgs.Document">
      <summary>
Gets the PdfDocument.
</summary>
      <Remarks>Gets the PDF document currently displayed.</Remarks>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.DocumentDisplayedEventArgs">
      <summary>
Provides data for the <see cref="!:DocumentDisplayed" /> event. 
</summary>
      <example>For example refer to <see cref="!:DocumentDisplayed" /> event.</example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.DocumentDisplayingEventArgs.FocusDocument">
      <summary>
Gets or sets the value of <see cref="P:ceTe.DynamicPDF.Viewer.DocumentDisplayingEventArgs.FocusDocument" /> property which decides focus should be given to this control or not after loading the document.
</summary>
      <remarks> Default value is true. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.DocumentDisplayingEventArgs.InitialVisibleNavigationPane">
      <summary>
Gets or sets the value of navigation pane to be visible when displaying a document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.DocumentDisplayingEventArgs.InitialOrientation">
      <summary>
Gets or sets the value of page orientation when displaying a document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.DocumentDisplayingEventArgs.InitialZoomPercent">
      <summary>
Gets or sets the value of page zoom percent when displaying a document.
</summary>
      <remarks> This value ranges from .01f to 64.0f. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.DocumentDisplayingEventArgs.InitialZoomMode">
      <summary>
Gets or sets the value of page zoom mode when displaying a document.
</summary>
      <remarks> If zoom percent mode is selected then the value of <see cref="P:ceTe.DynamicPDF.Viewer.DocumentDisplayingEventArgs.InitialZoomPercent" /> has to be specified. Otherwise it will be .01f by default. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.DocumentDisplayingEventArgs.InitialPageMode">
      <summary>
Gets or sets the value of page mode when displaying a document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.DocumentDisplayingEventArgs.InitialPage">
      <summary>
Gets or sets the value of initial page when displaying a document.
</summary>
      <remarks>The value should be a positive number and it will be 0 by default in case if it exceeds the total number of pages or not set.</remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.DocumentDisplayingEventArgs.Cancel">
      <summary>
Gets or sets a boolean.
</summary>
      <remarks>True will cancel the PDF document displaying and <see cref="!:FileOpenFailed" /> event will be raised.</remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.DocumentDisplayingEventArgs.Document">
      <summary>
Gets the PdfDocument.
</summary>
      <remarks>Gets the PDF document PdfViewer going to display.</remarks>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.DocumentDisplayingEventArgs">
      <summary>
Provides data for the <see cref="!:DocumentDisplaying" /> event. 
</summary>
      <example>For example refer to <see cref="!:DocumentDisplaying" /> event.</example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.FileOpenDialogShowingEventArgs.PdfDocument">
      <summary>
Gets or sets the PdfDocument.
</summary>
      <Remarks>Gets the PDF document currently displaying. If a new PdfDocument is assighned to this property, then PdfViewer will  
display the assighned document.</Remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.FileOpenDialogShowingEventArgs.InitialDirectory">
      <summary>
Gets or sets initial directory of the displaying file dialog.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.FileOpenDialogShowingEventArgs.Cancel">
      <summary>
Gets or sets a boolean. 
</summary>
      <Remarks>Cancelling at this point will retain the currently displayed PDF document in PdfViewer.</Remarks>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.FileOpenDialogShowingEventArgs">
      <summary>
Provides data for the <see cref="!:FileOpenDialogShowing" /> event. 
</summary>
      <example>For example refer to <see cref="!:FileOpenDialogShowing" /> event.</example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PageVisibleArea.PixelRight">
      <summary>
Gets the right display end position of the page in pixels. 
</summary>
      <remarks />
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PageVisibleArea.PixelBottom">
      <summary>
Gets the bottom display end position of the page in pixels. 
</summary>
      <remarks />
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PageVisibleArea.PixelTop">
      <summary>
Gets the top display start position of the page in pixels.   
</summary>
      <remarks />
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PageVisibleArea.PixelLeft">
      <summary>
Gets the left display start position of the page in pixels. 
</summary>
      <remarks />
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PageVisibleArea.Bottom">
      <summary>
Gets the bottom value of the page. 
</summary>
      <remarks> This value ranges from from value of displayed proportion to '1' and is equal to the portion of the page lying inside the bottom edge of
the display.If the full page is inside the bottom edge then bottom value will be '0'. We can get the percentage of page on display vertically 
then calculation is <b>(Bottom - Top) * 100 </b>. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PageVisibleArea.Right">
      <summary>
Gets the right value of the page. 
</summary>
      <remarks> This value ranges from '0' to '1' and is equal to the portion of the page lying inside the Right edge of
the display.If the full page is inside the right edge then right value will be '1'. We can get the percentage of page
on display then calculation is <b>(Right - Left) * 100 </b>. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PageVisibleArea.Top">
      <summary>
Gets the top value of the page. 
</summary>
      <remarks> This value ranges from value of displayed proportion to '1' and is equal to the portion of the page lying outside the top edge of
the display.If the page is inside the display then top value will be '0'. We can get the percentage of page on display vertically
then calculation is <b>(Bottom - Top) * 100 </b>. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PageVisibleArea.Left">
      <summary>
Gets the left value of the page. 
</summary>
      <remarks> This value ranges from '0' to '1' and is equal to the portion of the page lying outside the left edge of
the display.If the page is inside the display then left value will be '0'. We can get 
the percentage of page on display horizontally then calculation is <b>(Right - Left) * 100 </b>. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PageVisibleArea.PageNumber">
      <summary>
Gets the page number. 
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.PageVisibleArea">
      <summary>
Provides the details of visible area of a page. 
</summary>
      <example>The following example will show how we can get the array of PageVisibleArea for a view.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        ' Load and Open the document in Viewer.
        Dim MyDocument As New PdfDocument("C:\MyDocument.pdf")
        MyPdfViewer.Open(MyDocument)

        'Get a view to calculate visible page area
        Dim MyCurrentView As ceTe.DynamicPDF.Viewer.View = MyPdfViewer.GetCurrentView()

        'Get the array of pages with their visible area
        Dim MyVisibleAreaArray As PageVisibleArea() = MyPdfViewer.GetPageVisibleArea(MyCurrentView)

        'Get the details of visible page area
        Dim pageNumber As Integer = MyVisibleAreaArray(0).PageNumber
        Dim left As Single = MyVisibleAreaArray(0).Left
        Dim top As Single = MyVisibleAreaArray(0).Top
        Dim right As Single = MyVisibleAreaArray(0).Right
        Dim bottom As Single = MyVisibleAreaArray(0).Bottom

    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
            this.Load += new EventHandler(Form1_Load);
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Load and Open the document in Viewer.
            PdfDocument document = new PdfDocument(@"C:\MyDocument.pdf");
            pdfViewer.Open(document);

            // Get a view to calculate visible page area
            ceTe.DynamicPDF.Viewer.View currentView = pdfViewer.GetCurrentView();

            // Get the array of pages with their visible area
            PageVisibleArea[] visibleAreaArray = pdfViewer.GetPageVisibleArea(currentView);

            // Get the details of visible page area
            int pageNumber = visibleAreaArray[0].PageNumber;
            float left = visibleAreaArray[0].Left;
            float top = visibleAreaArray[0].Top;
            float right = visibleAreaArray[0].Right;
            float bottom = visibleAreaArray[0].Bottom;
        }
    }
}
</code></example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.TextSelectedEventArgs.SelectedText">
      <summary>
Gets selected text.
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.TextSelectedEventArgs">
      <summary>
Provides data for the <see cref="!:TextSelected" /> event. 
</summary>
      <example>For example refer to <see cref="!:TextSelected" /> event.</example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.TextSelectingEventArgs.Cancel">
      <summary>
Gets or sets a boolean. 
</summary>
      <Remarks>True will cancel the text selection.</Remarks>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.TextSelectingEventArgs">
      <summary>
Provides data for the <see cref="!:TextSelecting" /> event. 
</summary>
      <example>For example refer to <see cref="!:TextSelecting" /> event.</example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.SearchProgressingEventArgs.CurrentPageNumber">
      <summary>
Gets the page number where the search is happening. 
</summary>
      <remarks> It is a non zero based index. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.SearchProgressingEventArgs.Cancel">
      <summary>
Gets or sets the value whether to cancel the search or not. 
</summary>
      <remarks> True value will abort the search process. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.SearchProgressingEventArgs.MatchOption">
      <summary>
Gets the match option used for search. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.SearchProgressingEventArgs.SearchTerm">
      <summary>
Gets the search string. 
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.SearchProgressingEventArgs">
      <summary>
Provides data for the <see cref="!:SearchProgressing" /> event. 
</summary>
      <example> For example refer to <see cref="!:SearchProgressing" /> event. </example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PasswordRequiredEventArgs.MaxAttempts">
      <summary>
Gets or sets the maximum number of attempts to re-entry, when incorrect password is given.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PasswordRequiredEventArgs.Cancel">
      <summary>
Gets or sets a boolean. 
</summary>
      <Remarks>True will cancel the PDF file open and <see cref="!:FileOpenFailed" /> event will be raised.</Remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PasswordRequiredEventArgs.Password">
      <summary>
Gets or sets the PDF document password.
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.PasswordRequiredEventArgs">
      <summary>
Provides data for the <see cref="!:PasswordRequired" /> event.
</summary>
      <example>For example refer to <see cref="!:PasswordRequired" /> event.</example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.FileOpenedEventArgs.PdfDocument">
      <summary>
Gets the PDF document.
</summary>
      <Remarks>Gets the PDF document currently displaying.</Remarks>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.FileOpenedEventArgs">
      <summary>
Provides data for the <see cref="!:FileOpened" /> event. 
</summary>
      <example>For example refer to <see cref="!:FileOpened" /> event.</example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.FileOpeningEventArgs.PdfDocument">
      <summary>
Gets or sets the PDF document.
</summary>
      <Remarks>Gets the PDF document currently displaying. If a new PdfDocument is assigned to this property, then PdfViewer will  
display the assigned document.</Remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.FileOpeningEventArgs.FilePath">
      <summary>
Gets or sets the PDF document file path.
</summary>
      <Remarks>Gets file path of the currently displayed PDF document. On changing the file path, new document will be displayed in PdfViewer.</Remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.FileOpeningEventArgs.Cancel">
      <summary>
Gets or sets a boolean.
</summary>
      <Remarks>True will cancel the PDF file open and <see cref="!:FileOpenFailed" /> event will be raised.</Remarks>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.FileOpeningEventArgs">
      <summary>
Provides data for the <see cref="!:FileOpening" /> event. 
</summary>
      <example>For example refer to <see cref="!:FileOpening" /> event.</example>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.PrintDialogue.printDocument">
      <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.PrintDialogue.components">
      <summary>
Required designer variable.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PagePrintingEventArgs.CancelPrintingPage">
      <summary>
Gets or sets a boolean. Setting to true will cancel printing the current page.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PagePrintingEventArgs.PageNumber">
      <summary>
Gets the page number which is going to be printed.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PagePrintingEventArgs.Document">
      <summary>
Gets the PdfDocument.
</summary>
      <Remarks>Gets the PDF document currently displayed.</Remarks>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.PagePrintingEventArgs">
      <summary>
Provides data for the <see cref="!:PagePrinting" /> event. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.DocumentPrintedEventArgs.Document">
      <summary>
Gets the PdfDocument.
</summary>
      <Remarks>Gets the PDF document currently displayed.</Remarks>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.DocumentPrintedEventArgs">
      <summary>
Provides data for the <see cref="!:DocumentPrinted" /> event. 
</summary>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.ThumbnailControl.InitializeComponent">
      <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.MatchOptions">
      <summary>
Specifies the match options for the search. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.MatchOptions.All">
      <summary>
Searches the term both by matching the case and whole word. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.MatchOptions.WholeWordOnly">
      <summary>
Searches the term by matching only the whole word. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.MatchOptions.CaseSensitive">
      <summary>
Search the term by matching the character case. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.MatchOptions.None">
      <summary>
Searches the term with no option. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.ViewChangedEventArgs.AddViewToHistory">
      <summary>
Gets or set the boolean to store view to history or not. 
</summary>
      <remarks> Setting this value to true may result in inappropriate behavior while moving to previous view or next view, 
viewer is using this internally on some conditions. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.ViewChangedEventArgs.CurrentView">
      <summary>
Gets the current view. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.ViewChangedEventArgs.PreviousView">
      <summary>
Gets the previous view. 
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.ViewChangedEventArgs">
      <summary>
Provides data for the <see cref="!:ViewChanged" /> event. 
</summary>
      <example> For example refer to <see cref="!:ViewChanged" /> event. </example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.View.PageOrientation">
      <summary>
Gets the page orientation of the view. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.View.ZoomMode">
      <summary>
Gets the zoom mode of the view. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.View.PageDisplayMode">
      <summary>
Gets the page display mode of the view. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.View.ZoomPercent">
      <summary>
Gets the zoom percent of the view. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.View.StartPageNumber">
      <summary>
Gets the start page number of the view. 
</summary>
      <remarks> It is a non zero based index. </remarks>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.View.Equals(System.Object)">
      <summary>
Determines whether the specified <b>View</b> object is equal to the current <b>View</b> object. 
</summary>
      <param name="obj">
        <b>View</b> object to compare with current <b>View</b> object.</param>
      <remarks> true if the specified <b>View</b>&gt; object is equal to the current <b>View</b> object otherwise, false. </remarks>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.View">
      <summary>
Represents the view containing the attributes which defines the display. 
</summary>
      <example>The following example will show how to get a view and its associated data. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Open document in viewer.
        MyPdfViewer.Open("C:\MyDocument.pdf")

        ' Get current view on display
        Dim MyCurrentView As ceTe.DynamicPDF.Viewer.View = MyPdfViewer.GetCurrentView()

        ' Get Initial view of the document
        Dim MyInitialView As ceTe.DynamicPDF.Viewer.View = MyPdfViewer.GetInitialView()
        
        ' Get the details from a view
        Dim pageNumber As Integer = MyCurrentView.StartPageNumber
        Dim zoomValue As Single = MyCurrentView.ZoomPercent
        Dim MyDisplayMode As PageDisplayMode = MyCurrentView.PageDisplayMode
        Dim MyZoomMode As Zoom = MyCurrentView.ZoomMode
        Dim pageOrientation As ceTe.DynamicPDF.Viewer.Orientation = MyCurrentView.PageOrientation
    End Sub
        
End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						                				
														
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load+=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Open document in viewer.
            pdfViewer.Open(@"C:\MyDocument.pdf");
        
            // Get current view on display
            ceTe.DynamicPDF.Viewer.View currentView = pdfViewer.GetCurrentView();

            // Get Initial view of the document
            ceTe.DynamicPDF.Viewer.View initialView = pdfViewer.GetInitialView();
            
            // Get the details from a view
            int pageNumber = currentView.StartPageNumber;
            float zoomValue = currentView.ZoomPercent;
            PageDisplayMode displayMode = currentView.PageDisplayMode;
            Zoom zoomMode = currentView.ZoomMode;
            ceTe.DynamicPDF.Viewer.Orientation pageOrientation = currentView.PageOrientation;
        }
    }
}
</code></example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.Orientation">
      <summary>
Specifies the orientation types for a page. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.Orientation.RotatedCounterClockwise90d">
      <summary>
Shows that page is rotated counter clockwise to 90 degree. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.Orientation.Rotated180d">
      <summary>
Shows that page is rotated to 180 degree. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.Orientation.RotatedClockwise90d">
      <summary>
Shows that page is rotated clockwise to 90 degree. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.Orientation.Normal">
      <summary>
Shows that page is not rotated. 
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.CursorMode">
      <summary>
Specifies the cursor modes. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.CursorMode.None">
      <summary>
Cursor mode for suppressing any UI action on a mourse click or drag.
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.CursorMode.PanningMode">
      <summary>
Cursor mode for panning. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.CursorMode.TextSelectionMode">
      <summary>
Cursor mode for text selection. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfDocument.Permissions">
      <summary>
Gets the <see cref="T:ceTe.DynamicPDF.Viewer.Permission" /> information of the document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfDocument.ZoomMode">
      <summary>
Gets the initial zoom mode of the document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfDocument.VisibleNavigationPane">
      <summary>
Gets the initial navigation pane of the document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfDocument.PageMode">
      <summary>
Gets the initial page mode of the document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfDocument.InitialPage">
      <summary>
Gets the initial page to be displayed.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfDocument.PageCount">
      <summary>
Gets the page count PDF document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfDocument.Bookmarks">
      <summary>
Gets the collection of bookmarks present in the PDF document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfDocument.Title">
      <summary>
Gets the title property of the PDF document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfDocument.Subject">
      <summary>
Gets the subject property of the PDF document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfDocument.Producer">
      <summary>
Gets the producer property of the PDF document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfDocument.Keywords">
      <summary>
Gets the keywords property of the PDF document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfDocument.Creator">
      <summary>
Gets the creator property of the PDF document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfDocument.Author">
      <summary>
Gets the author property of the PDF document.
</summary>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfDocument.GetPage(System.Int32)">
      <summary>
Gets the <see cref="T:ceTe.DynamicPDF.Viewer.PdfPage" /> which contains page details like width and height.
</summary>
      <param name="pageNumber">Page number of the <see cref="T:ceTe.DynamicPDF.Viewer.PdfPage" /> required. </param>
      <remarks>Page number starting from one.</remarks>
      <returns>
        <see cref="T:ceTe.DynamicPDF.Viewer.PdfPage" /> related to the respective page number.</returns>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfDocument.#ctor(System.Byte[],System.String)">
      <summary>
Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Viewer.PdfDocument" /> class.
</summary>
      <param name="data">Byte array of the input PDF data. </param>
      <param name="password">Password to open the PDF file.</param>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfDocument.#ctor(System.IO.Stream,System.String)">
      <summary>
Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Viewer.PdfDocument" /> class.
</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />containing the PDF data.</param>
      <param name="password">Password to open the PDF file. </param>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfDocument.#ctor(System.String,System.String)">
      <summary>
Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Viewer.PdfDocument" /> class.
</summary>
      <param name="filePath">Physical file path of the PDF.</param>
      <param name="password">Password to open the PDF file.</param>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfDocument.#ctor(System.Byte[])">
      <summary>
Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Viewer.PdfDocument" /> class.
</summary>
      <param name="data">Byte array of the input PDF data.</param>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfDocument.#ctor(System.IO.Stream)">
      <summary>
Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Viewer.PdfDocument" /> class.
</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />containing the PDF data.</param>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.PdfDocument.#ctor(System.String)">
      <summary>
Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Viewer.PdfDocument" /> class.
</summary>
      <param name="filePath">Physical file path of the PDF.</param>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.PdfDocument">
      <summary>
Represents a Pdf document.
</summary>
      <example>This example demonstrates how to load a PDF file in <see cref="T:ceTe.DynamicPDF.Viewer.PdfViewer" /> control using <see cref="T:ceTe.DynamicPDF.Viewer.PdfDocument" />.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        ' Load and Open the document in Viewer.
        Dim MyDocument As New PdfDocument("C:\MyDocument.pdf")
        MyPdfViewer.Open(MyDocument)
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
            this.Load += new EventHandler(Form1_Load);
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Load and Open the document in Viewer.
            PdfDocument document = new PdfDocument(@"C:\MyDocument.pdf");
            pdfViewer.Open(document);
        }
    }
}
</code></example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfPage.Height">
      <summary>
Gets the height of pdf page in points.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.PdfPage.Width">
      <summary>
Gets the width of pdf page in points.
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.PdfPage">
      <summary>
Represents a Pdf page.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.Permission.AllowContentCopying">
      <summary>
Gets the copy permission of the document. 
</summary>
      <remarks> True value indicates that the document is copy protected. </remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.Permission.AllowPrinting">
      <summary>
Gets the print permission of the document. 
</summary>
      <remarks> True value indicates that the document is print protected. </remarks>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.Permission">
      <summary>
Provides information about the permissions of the <see cref="!:ceTe.DynamicPDF.Viewer.PdfDocument" />. 
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.PageDisplayMode">
      <summary>
Represents the collection of page display mode types. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.PageDisplayMode.TwoUpContinousWithCoverPage">
      <summary>
Shows the two up page view with cover page and scrolling enabled. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.PageDisplayMode.TwoUpWithCoverPage">
      <summary>
Shows the two up page view with cover page. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.PageDisplayMode.TwoUpContinous">
      <summary>
Shows two up page view with scrolling enabled. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.PageDisplayMode.TwoUp">
      <summary>
Shows the twp up page view. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.PageDisplayMode.SinglePageContinuous">
      <summary>
Shows the single page view with scrolling enabled. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.PageDisplayMode.SinglePage">
      <summary>
Shows the single page view. 
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.Zoom">
      <summary>
Specifies the zoom mode types. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.Zoom.ZoomPercent">
      <summary>
Shows the page at a zoom factor specified by the user.
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.Zoom.ActualSize">
      <summary>
Shows the page in its actual size.
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.Zoom.FitHeight">
      <summary>
Make the page to fit on the display only vertical.
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.Zoom.FitWidth">
      <summary>
Make the page to fit on the display only horizontal.
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.Zoom.FitPage">
      <summary>
Make the page to fit on the display both vertical and horizontal.
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.NavigationPane">
      <summary>
Specifies the Navigation window type shown when the PDF file is being viewed. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.NavigationPane.PageThumbnail">
      <summary>
Shows that Thumbnail window is visible. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.NavigationPane.Bookmark">
      <summary>
Shows that Bookmark window is visible. 
</summary>
    </member>
    <member name="F:ceTe.DynamicPDF.Viewer.NavigationPane.None">
      <summary>
Shows that no navigation window is visible. 
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.BookmarkList.Count">
      <summary>
Gets the count of the bookmarks present in the <see cref="T:ceTe.DynamicPDF.Viewer.PdfDocument" />.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.BookmarkList.Item(System.Int32)">
      <summary>
Gets a bookmark from bookmark list.
</summary>
    </member>
    <member name="M:ceTe.DynamicPDF.Viewer.BookmarkList.GetEnumerator">
      <summary>
Returns an enumerator that iterates through a collection of bookmarks.
</summary>
      <returns> An <see cref="!:System.Collections.IEnumerator" /> object that can be used to iterate through the collection of bookmarks. </returns>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.BookmarkList">
      <summary>
Represents a collection of bookmarks.
</summary>
      <example>The following example will get the collection of bookmarks from <see cref="T:ceTe.DynamicPDF.Viewer.PdfDocument" /> object. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        Dim MyDocument As New PdfDocument("C:\MyDocument.pdf")
    
        ' Get the Bookmark List from PDF document object.
        Dim MyBookmarksList As BookmarkList = MyDocument.Bookmarks

        ' Get the count of bookmarks as below.
        Dim MyBookmarksCount As Integer = MyBookmarksList.Count

    End Sub

End Class						
</code><code lang="C#">								
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : Form
    {
        private ceTe.DynamicPDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
            this.Load += new EventHandler(Form1_Load);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            PdfDocument document = new PdfDocument(@"C:\MyDocument.pdf");

            // Get the Bookmark List from PDF document object.
            BookmarkList bookmarkList = document.Bookmarks;

            // Get the count of bookmarks as below.
            int bookmarksCount = bookmarkList.Count;
       
        }
    }
}
</code></example>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.Bookmark.PageNumber">
      <summary>
Get the page number to which the bookmark will navigate.
</summary>
      <remarks>
Returns -1 if the bookmark is not having a valid page number.
</remarks>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.Bookmark.Bookmarks">
      <summary>
Gets the collection of child bookmarks present in the document.
</summary>
    </member>
    <member name="P:ceTe.DynamicPDF.Viewer.Bookmark.Text">
      <summary>
Gets the text of the bookmark.
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.Bookmark">
      <summary>
Represents a bookmark.
</summary>
      <example>The following example will get a bookmark from the child bookmark list.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports ceTe.DynamicPDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        Dim MyDocument As PdfDocument = New PdfDocument("C:\MyDocument.pdf")

        ' Get the bookmark list from PDF document object.
        Dim MyBookmarksList As BookmarkList = MyDocument.Bookmarks
        
        ' Get a single bookmark from the list by specifying the index between 0 and count of bookmarks.
        Dim MyBookmark As Bookmark = MyBookmarksList(1) 
        
        ' Open the document in Viewer.
        MyPdfViewer.Open(MyDocument)

        ' Navigate to the selected bookmark.
        MyPdfViewer.Navigate(MyBookmark)
    End Sub

End Class        
</code><code lang="C#">
using System;
using System.Windows.Forms;
using ceTe.DynamicPDF.Viewer;

namespace DynamicPDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
            this.Load+=new EventHandler(Form1_Load);
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }			

        private void Form1_Load(object sender, EventArgs e)
        {
            PdfDocument document = new PdfDocument(@"C:\MyDocument.pdf");

            // Get the bookmark list from PDF document object.
            BookmarkList bookmarksList = document.Bookmarks;
            
            // Get a single bookmark from the list by specifying the index between 0 and count of bookmarks.
            Bookmark bookmark = bookmarksList[2];

            // Open the document in Viewer.
            pdfViewer.Open(document);

            // Navigate to the selected bookmark.
            pdfViewer.Navigate(bookmark);			
        }
    }
}
</code></example>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.InvalidPasswordException">
      <summary>
Represents a InvalidPasswordException
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.DocumentLoadException">
      <summary>
Represents a DocumentLoadException
</summary>
    </member>
    <member name="T:ceTe.DynamicPDF.Viewer.PdfViewerException">
      <summary>
Represents a PdfViewerException
</summary>
    </member>
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    <!-- Discarding badly formed XML document comment for member 'E:ceTe.DynamicPDF.Viewer.PdfViewer.ExceptionOccurred'. -->
  </members>
</doc>